/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package radar;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import javax.swing.JLayeredPane;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import static java.lang.System.in;
import static java.lang.System.out;
import java.net.ConnectException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import org.json.JSONException;
import org.json.JSONObject;
import java.math.*;
/**
 *
 * @author CRD 1
 */
public class radarView extends javax.swing.JFrame {

    int scaledX, scaledY, qtr, ox, oy, gap=0, posX=0, posY=0, initX, initY,x,y;
    int locX,locY;
    int[][] array2D;
    int[][] array2DCopy;
    int current,currentX,currentY;
    boolean round = true;
    int shiftX =0, shiftY=0;
    Color c = new Color(0, 255, 0, 255); 
    boolean shiftXbol=false,shiftYbool=false;
    BufferedImage theImage = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB); 
    //Socket s;
    //Locator locate ;
    //BufferedReader input ;
            
    public radarView() {
        initComponents();
    }

    radarView(int[][] array2D) throws IOException {
        initComponents();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.array2D = array2D;
        Toolkit tk = this.getToolkit();
        this.setSize(tk.getScreenSize().width, tk.getScreenSize().height);
        this.setVisible(true);
        this.setBackground(Color.BLACK);
        JLayeredPane lp = getLayeredPane();
        pane.setOpaque(false);
        panel.setOpaque(true);
        panel.add(jLabel1);
        lp.add(pane, Integer.valueOf(2));
        lp.add(panel, Integer.valueOf(1));   
        locX=130;
        locY=125;
        jPanel1.setLocation(locX, locY);
        jPanel1.setSize(430, 425);
        jPanel1.setBackground(Color.BLACK);
        pane.setLocation(-30,-25);
       // pane.setSize(tk.getScreenSize().width-locX, tk.getScreenSize().height-locY);
        pane.setBackground(Color.BLACK);
        jPanel1.add(pane);
        
        panel.setLocation(10, 10);
        panel.setBackground(Color.BLACK);
        panel.add(jPanel1);
        callPanel();
                
    }
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        pane = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RADAR SIMULATOR");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel.setBackground(new java.awt.Color(0, 0, 0));
        panel.setPreferredSize(new java.awt.Dimension(750, 750));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/radar 2 copy resized.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );

        pane.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout paneLayout = new javax.swing.GroupLayout(pane);
        pane.setLayout(paneLayout);
        paneLayout.setHorizontalGroup(
            paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );
        paneLayout.setVerticalGroup(
            paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                    .addContainerGap(148, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(635, Short.MAX_VALUE)))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 70, Short.MAX_VALUE))
            .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                    .addContainerGap(134, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(221, Short.MAX_VALUE)))
        );

        getContentPane().add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 680));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(radarView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(radarView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(radarView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(radarView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new radarView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pane;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    private void callPanel() throws IOException {
//        try {
//            s = new Socket("10.22.196.220", 1238);
//        } catch (IOException ex) {
//            Logger.getLogger(radarView.class.getName()).log(Level.SEVERE, null, ex);
//        }
        while(true){
            array2DCopy = new int[array2D.length][array2D.length];
            qtr = 0; 
//            initX = 450;
//            initY = 250;
            fetchOwnShipPos();
            if(true){
            //if(scaledX>249 && scaledX<750 && scaledY>249 && scaledY<750 ){
                if(qtr == 0){
                    gap=0;          
                    for(int i = scaledX-250; i<scaledX+251; i++){
                        ox = i;
                        oy = scaledY-250;
                        currentX=0;
                        currentY=0;
                        current=0;
                        findLine(ox, oy, scaledX, scaledY, 0); //findLine(200,0,450,250,0)
                        array2DCopy[currentX][currentY] = current;
                        paint1(pane.getGraphics());      
                    
                    }
                    qtr=1;
                }
                if(qtr == 1){
                    gap=0;
                    for(int i=scaledY-250;i<scaledY+251;i++){
                        ox=scaledX+250;
                        oy=i;
                        currentX=0;
                        currentY=0;
                        current=0;
                        findLine(ox, oy, scaledX, scaledY, 0);
                        array2DCopy[currentX][currentY] = current;                        
                        paint1(pane.getGraphics());
                    }
                    qtr=2;
                }
                if(qtr == 2){
                    gap=0;
                    for(int i=scaledX+250;i>scaledX-251;i--){
                        ox=i;
                        oy=scaledY+250;
                        currentX=0;
                        currentY=0;
                        current=0;
                        findLine(ox, oy, scaledX, scaledY, 0);
                        array2DCopy[currentX][currentY] = current;
                        paint1(pane.getGraphics());
                    }
                    qtr =3;
                }
                if(qtr == 3){
                    gap=0;
                    for(int i=scaledY+250;i>scaledY-251;i--){
                        ox=scaledX-250;
                        oy=i;
                        currentX=0;
                        currentY=0;
                        current=0;
                        findLine(ox, oy, scaledX, scaledY, 0);
                        array2DCopy[currentX][currentY] = current;
                        paint1(pane.getGraphics());
                    }
                }
            }else{
                break;
            }
            //round = !round;
        }
        
    }
    
    private void fetchOwnShipPos() throws IOException {
        
        try (Socket clientSocket = new Socket("127.0.0.1", 1238)) {
                System.err.println("Client was connected to the server ");
                // Creating input and putput stream to read and write
                    BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                    PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
                    
                    String s = in.readLine();
                    JSONObject json = new JSONObject(s);
                    x= (int) json.getDouble("x");
                    y = (int) json.getDouble("z");
//                    System.out.println("x is:"+json.getDouble("x"));
//                    System.out.println("z is:"+json.getDouble("z"));
                    
                  
                
//                System.err.println("Terminating the client connection.");
                out.close();
                in.close();
            
        } catch (ConnectException e) {
            System.err.println("No connection found");
        } catch (JSONException ex) {
            Logger.getLogger(radarView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        scaledX = Math.abs(x/20);
        scaledY = Math.abs(y/20);
        
        if ((scaledX%20)!= 0){
            scaledX= scaledX+1;
        }
        if ((scaledY %20)!= 0){
            scaledY =scaledY+1;
        }
        if (scaledX> 1000 || scaledY>1000){System.out.println("the ship's gone away...");}
        

//            input = new BufferedReader(new InputStreamReader(s.getInputStream()));
//            System.out.println("out "+s.getInputStream().toString());
//            locate = new Locator(s.getInputStream().toString().toCharArray());
//            System.out.println("locate ID "+locate.id);
//            System.out.println("locate X "+locate.x);
//            System.out.println("locate Y "+locate.y);
            

//            scaledX = initX+posX;
//            scaledY = initY+posY;
            
//            posX += 25;
//            posY += 25;
//            
                System.out.println(scaledX);
                System.out.println(scaledY);
              for(int i = 0; i<1000; i++){            
                        for(int j = 0; j<1000; j++){
                            array2DCopy[i][j] = 0;
                        }
               }
        
//            locate = null;
//            input = null;
//        } catch (UnknownHostException ex) {
//            Logger.getLogger(radarView.class.getName()).log(Level.SEVERE, null, ex);
       
       
        
//        try {
//            BufferedReader input = new BufferedReader(new InputStreamReader(s.getInputStream()));
//            String answer = input.readLine();
//            System.out.println(answer);
//        } catch (UnknownHostException ex) {
//            Logger.getLogger(radarView.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(radarView.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
    }
    
   
    

    public void findLine(int x0, int y0, int x1, int y1, int type){
        int dx = Math.abs(x1 - x0);
        int dy = Math.abs(y1 - y0); 
        int sx = x0 < x1 ? 1 : -1; 
        int sy = y0 < y1 ? 1 : -1;  
        int err = dx-dy;
        int e2; 
        
        while (true){
            if(type==0){
                searchMatrix(x0,y0);
            }else{
                printMatrix(x0,y0);
            }
            if (x0 == x1 && y0 == y1) 
                break; 
            e2 = 2 * err;
            if (e2 > -dy){
                err = err - dy;
                x0 = x0 + sx;
            } 
            if (e2 < dx){
                err = err + dx;
                y0 = y0 + sy;
            }
        }
    }
    
    
    private void searchMatrix(int x, int y) { //searchMatrix(200,0)
        //array2DCopy[x][y] = array2D[x][y];
        Graphics g = pane.getGraphics();
        int x0 = x+(250-scaledX+25);
        int y0 = y+(250-scaledY+25);
        if(x0<0 && !shiftXbol){
            shiftX=0-x0;
            shiftXbol = true;
        }
        if(y0<0 && !shiftYbool){
            shiftY=0-y0;
            shiftYbool = true;
        }
        
        x0 = x0 + shiftX;
        y0= y0 + shiftY;
        
//        System.out.println("x="+x0+" y="+y0);
//         System.out.println("x="+x+" y="+y);
        /*if(round){
            if(array2DCopy[x][y]==5){
                g.setColor(Color.black);
                g.drawRect(x0, y0, 1, 1);
            }else if(array2DCopy[x][y]==0){
                g.setColor(Color.black);
                g.drawRect(x0, y0, 1, 1);
                //g.drawRect(x-250, y-250, 1, 1);
            }else{
                g.setColor(Color.white);
                g.drawRect(x0, y0, 1, 1);
                //g.drawRect(x-250, y-250, 1, 1);
            } 
            
        }else{
            if(array2DCopy[x][y]==5){
                g.setColor(Color.green);
                g.drawRect(x0, y0, 1, 1);
            }else if(array2DCopy[x][y]==0){
                g.setColor(Color.green);
                g.drawRect(x0, y0, 1, 1);
            }else{
                g.setColor(Color.black);
                g.drawRect(x0, y0, 1, 1);
            } 
        }*/
        //System.out.println("-----------------------" + array2D[x][y]);
        if (x<1000 && x>0 && y<1000 && y>0){
            if(array2D[x][y] > current){
                current = array2D[x][y];
                currentX = x0;
                currentY = y0;
                array2DCopy[currentX][currentY] = current;
            }
        
        }
        
    }

    private void printMatrix(int x0, int y0) {
        int value = array2DCopy[x0][y0];
        Graphics g = pane.getGraphics();
        if(value>0){
            g.setColor(Color.green);
            g.drawRect(x0, y0, 1, 1);
        }
        //x0 = x0-posX+180;
        //y0 = y0-posY+180;
//        if(value!=0)
//            g.drawRect(x0, y0, 1, 1);
//        System.out.println("");
    }
    
//    private void printSearch() {
//      try {
//            for(int x = 0; x<500; x++){
//                for(int y = 0; y<500; y++){
//                    int value = array2DCopy[x][y];
//                    if(value>0){
//                        Color c = new Color(0, 255, 0, 255);                       
//                        theImage.setRGB(x,y,c.getRGB());
//                    }else{
//                        theImage.setRGB(x,y,0);
//                    }
//                    System.out.println("************");
//                }
//                System.out.println("&&&&&&&&&&&&&&&&&&&&"+ x);
//            }
//            File outputfile = new File("outImg.bmp");
//            ImageIO.write(theImage, "png", outputfile);
//            Image image = ImageIO.read(outputfile);
//            JLabel label = new JLabel(new ImageIcon(image));
//            this.getContentPane().add(label, BorderLayout.CENTER);
//            this.pack();
//            this.setVisible(true);
//
//        } catch (IOException ex) {
//            Logger.getLogger(circularSearch.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    
    //@Override
    public void paint1(Graphics g) { 
        g.setColor(c);
        int midX=250;
        int midY=250;

        switch(qtr){
            case(0):
               g.drawLine(midX, midY, gap, 0);
                if(gap>0){
                    g.setColor(Color.BLACK);
                    g.drawLine(midX, midY, gap-1, 0);
                    if(qtr!=4)
                        findLine(midX, midY, gap-1, 0, 1);
                }
                break;
            case(1):
                g.drawLine(midX, midY, 500, gap);
                if(gap>0){
                    g.setColor(Color.BLACK);
                    g.drawLine(midX, midY, 500, gap-1);
                    if(qtr!=4)
                        findLine(midX, midY, 500, gap-1, 1);
                }
                break;
            case(2):
                g.drawLine(midX, midY, 500-gap, 500);
                if(gap>0){
                    g.setColor(Color.BLACK);
                    g.drawLine(midX, midY, 501-gap, 500);
                    if(qtr!=4)
                        findLine(midX, midY, 501-gap, 500, 1);
                }
                break;
            case(3):
                g.drawLine(midX, midY, 0, 500-gap); 
                if(gap>0){
                   g.setColor(Color.BLACK);
                   g.drawLine(midX, midY, 0, 501-gap);
                   if(qtr!=4)
                        findLine(midX, midY, 0, 501-gap, 1);
                }
                break;
            default:
                break;
                
            
        }
        gap+=1;
        
//        if(qtr==0){
//            g.drawLine(250, 250, gap, 0);           
//            if(gap>0){
//                 g.setColor(Color.BLACK);
//                 g.drawLine(250, 250, gap-1, 0);
//            }
//            gap+=1;
//        }else if(qtr==1){
//            g.drawLine(250, 250, 500, gap);
//            if(gap>0){
//                g.setColor(Color.BLACK);
//                g.drawLine(250, 250,500, gap-1);
//            }
//            gap+=1;
//        }else if(qtr==2){
//            g.drawLine(250, 250, 500-gap, 500);
//            if(gap>0){
//                g.setColor(Color.BLACK);
//                g.drawLine(250, 250, 501-gap, 500);
//            }
//            gap+=1;
//        }else if(qtr==3){
//            g.drawLine(250, 250, 0, 500-gap);
//            if(gap>0){
//                g.setColor(Color.BLACK);
//                g.drawLine(250, 250, 0, 501-gap);
//            }
//            gap+=1;
//        }
        
    }
}
